@model SmartGuardPortalv1.Models.RegisterModel
@{
    
    int loginType = Request.Params["login_type"].AsInt();
    var listItems = new List<SelectListItem> 
    { 
              new SelectListItem { Text = "Mr.", Value = "0" }, 
              new SelectListItem { Text = "Ms.", Value = "1" },
              new SelectListItem { Text = "Mrs.", Value = "2" }, 
              new SelectListItem { Text = "Dr.", Value = "3" },
    };
    
    var listGender = new List<SelectListItem> 
    { 
              new SelectListItem { Text = "Male", Value = "false" }, 
              new SelectListItem { Text = "Female", Value = "true" },
              
    };

    var listHand = new List<SelectListItem> 
    { 
              new SelectListItem { Text = "Right", Value = "false" }, 
              new SelectListItem { Text = "Left", Value = "true" },
              
    };

    var listCountries = new List<SelectListItem>();

    SmartGuardPortalv1.Models.UsersContext db = new SmartGuardPortalv1.Models.UsersContext();
    foreach(SmartGuardPortalv1.Models.Country country in db.Countries)
    {
        listCountries.Add(new SelectListItem{ Text = country.CountryName, Value = country.CountryId});
    }
    
}

<b>Dashboard > Edit Profile</b>

@{
    

}

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()

    <fieldset>
        <legend>Registration Form</legend>
           <table>
               <tr>
                   <td>
                        
                        Username: @Model.UserName
                <br />
            
                        
                        Email: @Model.Email
                       @Html.HiddenFor(m => m.Email)
                        @Html.LabelFor(m => m.LastName) @Html.TextBoxFor(m => m.LastName)
                        @Html.LabelFor(m => m.FirstName) @Html.TextBoxFor(m => m.FirstName)
        
                        @Html.LabelFor(m => m.BirthDate) 
                        @Html.TextBoxFor(model => model.BirthDate, new { @Value = DateTime.Now, id = "datepicker" })
                        @Html.ValidationMessageFor(model => model.BirthDate)
                        
                        
                        
                   </td>
                   <td valign="top">
                        
                        
                       
                        <table>
                            <tr>
                                <td>Title: @Html.DropDownList("FkTitle",  new SelectList(listItems , "Value" , "Text"))</td>
                                <td>Gender: @Html.DropDownList("Gender",  new SelectList(listGender , "Value" , "Text"))</td>
                                @{
                                    if(Roles.IsUserInRole("User"))
                                    {
                                        <td>Hand @Html.DropDownList("Hand",  new SelectList(listHand , "Value" , "Text"))</td>
                                    }
                                }
                            </tr>
                        </table>
                        
                        
                        @Html.LabelFor(m => m.Address) @Html.TextBoxFor(m => m.Address)
                        @Html.LabelFor(m => m.City) @Html.TextBoxFor(m => m.City)
                        @Html.LabelFor(m => m.Country) @Html.DropDownList("Country",  new SelectList(listCountries , "Value" , "Text"))
                        @Html.LabelFor(m => m.Zip) @Html.TextBoxFor(m => m.Zip)
                        @Html.LabelFor(m => m.Phone) @Html.TextBoxFor(m => m.Phone)
                       
                        <br />
                        <input type="submit" value="Edit" />
                   </td>
               </tr>

           </table>
            
    </fieldset>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
